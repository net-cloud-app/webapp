name: Create Zip File

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Create Zip File
        run: |
          zip -r my-repo-files.zip .

      - name: Upload Zip File
        uses: actions/upload-artifact@v2
        with:
          name: my-repo-zip
          path: my-repo-files.zip

      - name: Install Packer plugin
        run: packer plugins install github.com/hashicorp/amazon
      

      - name: Building Packer Template
        run: |
          # Build AMI using Packer and store output in a file
          packer build -var "demo_account_id=${{ secrets.DEMO_ACCOUNT_ID }}" \
                       -var "source_ami=${{ secrets.SOURCE_AMI }}" \
                       -var "ami_name=${{ secrets.AMI_NAME }}" \
                       -var "aws_region=${{ secrets.AWS_REGION }}" \
                       -var "aws_secret_access_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
                       -var "aws_access_key=${{ secrets.AWS_ACCESS_KEY }}" \
                       debian-ami.pkr.hcl | tee output.txt
      
          # Extract AMI ID from the Packer output and store it in a separate file
          grep -oP 'ami-\w+' output.txt > ami.txt
      
          # Set AMI_ID as an environment variable
          AMI_ID=$(cat ami.txt)
          echo "AMI_ID=${AMI_ID}" >> $GITHUB_ENV
      
      - name: Create new launch template version
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.DEMO_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.DEMO_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
        run: |
          # Retrieve the latest launch template
          LAUNCH_TEMPLATE_NAME=$(aws ec2 describe-launch-templates --query 'LaunchTemplates | sort_by(@, &CreateTime) | [-1].LaunchTemplateName' --output text)
      
          if [ -z "$LAUNCH_TEMPLATE_NAME" ]; then
              echo "No launch template found."
              exit 1
          fi
      
          # Create new launch template version using the environment variable
          aws ec2 create-launch-template-version \
            --launch-template-name "$LAUNCH_TEMPLATE_NAME" \
            --version-description latest \
            --source-version 1 \
            --launch-template-data "ImageId=${AMI_ID}"
     

      - name: Update the autoscaling group
        id: set_asg_name
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.DEMO_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.DEMO_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
        run: |
          AUTO_SCALING_GROUP_NAME=$(aws autoscaling describe-auto-scaling-groups --query "AutoScalingGroups[?starts_with(AutoScalingGroupName, 'autoScalingGroup-')].AutoScalingGroupName" --output text | head -n 1)
          if [ -z "$AUTO_SCALING_GROUP_NAME" ]; then
              echo "No Auto Scaling Group found with the specified prefix."
              exit 1
          fi
          echo "Auto Scaling Group Name: $AUTO_SCALING_GROUP_NAME"
          echo "AUTO_SCALING_GROUP_NAME=$AUTO_SCALING_GROUP_NAME" >> $GITHUB_ENV
          aws autoscaling update-auto-scaling-group --auto-scaling-group-name $AUTO_SCALING_GROUP_NAME --launch-template LaunchTemplateName=launchTemplate-941aa22,Version='$Latest'

      - name: Instance refresh and wait
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.DEMO_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.DEMO_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
        run: |
          REFRESH_ID=$(aws autoscaling start-instance-refresh --auto-scaling-group-name "$AUTO_SCALING_GROUP_NAME" --query 'InstanceRefreshId' --output text)
          STATUS="pending"
          while [ "$STATUS" != "Successful" ]; do
            echo "Waiting for instance refresh to complete..."
            sleep 60 
            STATUS=$(aws autoscaling describe-instance-refreshes --auto-scaling-group-name "$AUTO_SCALING_GROUP_NAME" --instance-refresh-ids $REFRESH_ID --query 'InstanceRefreshes[0].Status' --output text)
            if [ "$STATUS" == "Failed" ]; then
              echo "Instance refresh failed."
              exit 1
            fi
          done
          echo "Instance refresh completed successfully."
     
